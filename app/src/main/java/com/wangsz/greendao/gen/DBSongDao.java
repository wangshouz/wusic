package com.wangsz.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangsz.wusic.db.model.DBSong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSONG".
*/
public class DBSongDao extends AbstractDao<DBSong, Void> {

    public static final String TABLENAME = "DBSONG";

    /**
     * Properties of entity DBSong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Duration = new Property(0, long.class, "duration", false, "DURATION");
        public final static Property Artist = new Property(1, String.class, "artist", false, "ARTIST");
        public final static Property Parent_path = new Property(2, String.class, "parent_path", false, "PARENT_PATH");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property Album_id = new Property(4, String.class, "album_id", false, "ALBUM_ID");
        public final static Property Album_path = new Property(5, String.class, "album_path", false, "ALBUM_PATH");
        public final static Property Year = new Property(6, long.class, "year", false, "YEAR");
        public final static Property Data = new Property(7, String.class, "data", false, "DATA");
        public final static Property Size = new Property(8, long.class, "size", false, "SIZE");
        public final static Property Display_name = new Property(9, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Date_added = new Property(11, long.class, "date_added", false, "DATE_ADDED");
        public final static Property Date_modified = new Property(12, long.class, "date_modified", false, "DATE_MODIFIED");
        public final static Property Mime_type = new Property(13, String.class, "mime_type", false, "MIME_TYPE");
    }


    public DBSongDao(DaoConfig config) {
        super(config);
    }
    
    public DBSongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSONG\" (" + //
                "\"DURATION\" INTEGER NOT NULL ," + // 0: duration
                "\"ARTIST\" TEXT," + // 1: artist
                "\"PARENT_PATH\" TEXT," + // 2: parent_path
                "\"ALBUM\" TEXT," + // 3: album
                "\"ALBUM_ID\" TEXT," + // 4: album_id
                "\"ALBUM_PATH\" TEXT," + // 5: album_path
                "\"YEAR\" INTEGER NOT NULL ," + // 6: year
                "\"DATA\" TEXT," + // 7: data
                "\"SIZE\" INTEGER NOT NULL ," + // 8: size
                "\"DISPLAY_NAME\" TEXT," + // 9: display_name
                "\"TITLE\" TEXT," + // 10: title
                "\"DATE_ADDED\" INTEGER NOT NULL ," + // 11: date_added
                "\"DATE_MODIFIED\" INTEGER NOT NULL ," + // 12: date_modified
                "\"MIME_TYPE\" TEXT);"); // 13: mime_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBSong entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDuration());
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(2, artist);
        }
 
        String parent_path = entity.getParent_path();
        if (parent_path != null) {
            stmt.bindString(3, parent_path);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(5, album_id);
        }
 
        String album_path = entity.getAlbum_path();
        if (album_path != null) {
            stmt.bindString(6, album_path);
        }
        stmt.bindLong(7, entity.getYear());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(8, data);
        }
        stmt.bindLong(9, entity.getSize());
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(10, display_name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
        stmt.bindLong(12, entity.getDate_added());
        stmt.bindLong(13, entity.getDate_modified());
 
        String mime_type = entity.getMime_type();
        if (mime_type != null) {
            stmt.bindString(14, mime_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBSong entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDuration());
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(2, artist);
        }
 
        String parent_path = entity.getParent_path();
        if (parent_path != null) {
            stmt.bindString(3, parent_path);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(5, album_id);
        }
 
        String album_path = entity.getAlbum_path();
        if (album_path != null) {
            stmt.bindString(6, album_path);
        }
        stmt.bindLong(7, entity.getYear());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(8, data);
        }
        stmt.bindLong(9, entity.getSize());
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(10, display_name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
        stmt.bindLong(12, entity.getDate_added());
        stmt.bindLong(13, entity.getDate_modified());
 
        String mime_type = entity.getMime_type();
        if (mime_type != null) {
            stmt.bindString(14, mime_type);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DBSong readEntity(Cursor cursor, int offset) {
        DBSong entity = new DBSong( //
            cursor.getLong(offset + 0), // duration
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // artist
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent_path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // album_path
            cursor.getLong(offset + 6), // year
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // data
            cursor.getLong(offset + 8), // size
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // display_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.getLong(offset + 11), // date_added
            cursor.getLong(offset + 12), // date_modified
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // mime_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBSong entity, int offset) {
        entity.setDuration(cursor.getLong(offset + 0));
        entity.setArtist(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_path(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbum_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYear(cursor.getLong(offset + 6));
        entity.setData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSize(cursor.getLong(offset + 8));
        entity.setDisplay_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDate_added(cursor.getLong(offset + 11));
        entity.setDate_modified(cursor.getLong(offset + 12));
        entity.setMime_type(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DBSong entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DBSong entity) {
        return null;
    }

    @Override
    public boolean hasKey(DBSong entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
