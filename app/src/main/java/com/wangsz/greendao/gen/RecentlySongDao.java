package com.wangsz.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangsz.wusic.db.model.RecentlySong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENTLY_SONG".
*/
public class RecentlySongDao extends AbstractDao<RecentlySong, Long> {

    public static final String TABLENAME = "RECENTLY_SONG";

    /**
     * Properties of entity RecentlySong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Data = new Property(1, String.class, "data", false, "DATA");
        public final static Property Date_added = new Property(2, long.class, "date_added", false, "DATE_ADDED");
        public final static Property Date_modified = new Property(3, long.class, "date_modified", false, "DATE_MODIFIED");
    }


    public RecentlySongDao(DaoConfig config) {
        super(config);
    }
    
    public RecentlySongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENTLY_SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATA\" TEXT," + // 1: data
                "\"DATE_ADDED\" INTEGER NOT NULL ," + // 2: date_added
                "\"DATE_MODIFIED\" INTEGER NOT NULL );"); // 3: date_modified
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENTLY_SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentlySong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
        stmt.bindLong(3, entity.getDate_added());
        stmt.bindLong(4, entity.getDate_modified());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentlySong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
        stmt.bindLong(3, entity.getDate_added());
        stmt.bindLong(4, entity.getDate_modified());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentlySong readEntity(Cursor cursor, int offset) {
        RecentlySong entity = new RecentlySong( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // data
            cursor.getLong(offset + 2), // date_added
            cursor.getLong(offset + 3) // date_modified
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentlySong entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate_added(cursor.getLong(offset + 2));
        entity.setDate_modified(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentlySong entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentlySong entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentlySong entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
